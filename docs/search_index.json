[["index.html", "Useful R Syntax 1 Indexxx", " Useful R Syntax Chris mcNeil 2021-04-28 1 Indexxx "],["Title.html", "2 Collection of useful R syntax and methods ", " 2 Collection of useful R syntax and methods "],["introduction.html", "2.1 Introduction", " 2.1 Introduction This document is intended to collect all the useful code snippets I use. I intend to organise the snippets into sections. data wrangling. data restructuring data manipulation (creating new variables) statistical analysis  basic statistical analysis - advanced data visualisation Use the mtcars data where possible. Load all libraries library(tidyverse) library(janitor) #dataframe import cleaning library(knitr) #nice html tables library(kableExtra) # nicer knitr tables library(broom) "],["loading-and-manipulating-packages-and-data-frames.html", "2.2 Loading and manipulating packages and data frames", " 2.2 Loading and manipulating packages and data frames ###Data importing using Janitor # Create a data.frame with dirty names test_df &lt;- as.data.frame(matrix(ncol = 6)) names(test_df) &lt;- c(&quot;firstName&quot;, &quot;ábc@!*&quot;, &quot;% successful (2009)&quot;, &quot;REPEAT VALUE&quot;, &quot;REPEAT VALUE&quot;, &quot;&quot;) head(test_df) ## firstName ábc@!* % successful (2009) REPEAT VALUE REPEAT VALUE ## 1 NA NA NA NA NA NA test_df &lt;- test_df %&gt;% clean_names() head(test_df) ## first_name abc percent_successful_2009 repeat_value repeat_value_2 x ## 1 NA NA NA NA NA NA Reference here 2.2.1 Remove dataframe from environment: data(&quot;mtcars&quot;) data(&quot;band_instruments&quot;) data(&quot;band_instruments2&quot;) # Load example datasets rm(list=ls()[! ls() %in% c(&quot;band_instruments&quot;,&quot;band_instruments2&quot;)]) # Everything except Band instruments rm(list=setdiff(ls(), &quot;band_instruments&quot;)) # Everything except &quot;bandinstruments&quot; rm(list=ls()) # Remove everything Reference: Stackoverflow 2.2.2 Remove a package (library) #Unload a module: library(clipr) #load detach(package:clipr) #unload 2.2.3 Recode a text variable Tidyverse libraries are needed for the following examples. data(&quot;band_members&quot;) kable(head(band_members)) %&gt;% kable_minimal(full_width = F) name band Mick Stones John Beatles Paul Beatles band_members &lt;- band_members %&gt;% mutate(name=recode(name, &quot;Mick&quot;= &quot;m&quot;)) kable(head((band_members))) %&gt;% kable_minimal(full_width = F) name band m Stones John Beatles Paul Beatles rm(list=ls()) # Remove everything Reference for table formatting Kable Extra 2.2.4 Altering variable names: Remove all underscores from names data(&quot;mtcars&quot;) mtcars &lt;- mtcars %&gt;% rename(hp_new=hp) kable(head((mtcars))) %&gt;% kable_minimal(full_width = F) mpg cyl disp hp_new drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 mtcars &lt;- mtcars %&gt;% rename_all(funs(str_replace(., &quot;_&quot;, &quot;&quot;))) ## Warning: `funs()` was deprecated in dplyr 0.8.0. ## Please use a list of either functions or lambdas: ## ## # Simple named list: ## list(mean = mean, median = median) ## ## # Auto named with `tibble::lst()`: ## tibble::lst(mean, median) ## ## # Using lambdas ## list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) kable(head((mtcars))) %&gt;% kable_minimal(full_width = F) mpg cyl disp hpnew drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 "],["data-manipulation.html", "2.3 Data manipulation", " 2.3 Data manipulation 2.3.1 Bin variable based on The value ( e.g. Low/Medium/High) data(mtcars) mtcars &lt;- mtcars %&gt;% mutate(hp_cat=cut(hp, breaks=c(-Inf, 100, Inf), labels=c(&quot;low hp&quot;,&quot;high hp&quot;))) 2.3.2 Perform conditional function mtcars &lt;- mtcars %&gt;% mutate(loghp=ifelse(cyl&gt;4,log10(hp),NA)) # Nonsensical example, but log transformed all horse powers of cars with more # than four cylinders 2.3.3 Calculate sum of values across rows mtcars &lt;- mtcars %&gt;% mutate(sum = select(., disp:drat) %&gt;% apply(1, sum, na.rm=TRUE)) #apply() takes Data frame or matrix as an input and gives output in vector #(i.e.many columns to one list) # the &#39;1&#39; sets the dataframe to use (already selected here) Reference for summation across rows 2.3.4 Standardise variable (mean of 0, SD of 1) set.seed(1234) # randowmn seed dat &lt;- data.frame(x = rnorm(10, 30, .2), y = runif(10, 3, 5), z = runif(10, 10, 20)) dat ## x y z ## 1 29.75859 3.633225 14.56091 ## 2 30.05549 3.605387 12.65187 ## 3 30.21689 3.318092 13.04672 ## 4 29.53086 3.079992 15.07307 ## 5 30.08582 3.437599 11.81096 ## 6 30.10121 4.621197 17.59671 ## 7 29.88505 4.051395 12.01248 ## 8 29.89067 4.829316 12.58810 ## 9 29.88711 4.662690 19.92150 ## 10 29.82199 3.091541 18.07352 dat2 &lt;- dat %&gt;% mutate_each_(funs(scale(.) %&gt;% as.vector), vars=c(&quot;y&quot;,&quot;z&quot;)) ## Warning: `mutate_each_()` was deprecated in dplyr 0.7.0. ## Please use `across()` instead. dat2 ## x y z ## 1 29.75859 -0.3004815 -0.06016029 ## 2 30.05549 -0.3423437 -0.72529604 ## 3 30.21689 -0.7743696 -0.58772361 ## 4 29.53086 -1.1324181 0.11828039 ## 5 30.08582 -0.5946582 -1.01827752 ## 6 30.10121 1.1852038 0.99754666 ## 7 29.88505 0.3283513 -0.94806607 ## 8 29.89067 1.4981677 -0.74751378 ## 9 29.88711 1.2475998 1.80753470 ## 10 29.82199 -1.1150515 1.16367556 funcs &lt;- list( mean = ~mean(.x, na.rm = TRUE), sd = ~sd(.x, na.rm = TRUE) ) dat2 %&gt;% summarise(across(x:z,funcs)) ## x_mean x_sd y_mean y_sd z_mean z_sd ## 1 29.92337 0.1991575 1.27654e-16 1 -3.469447e-18 1 2.3.5 Conditional Replacements Replace all NAs in a specified variable with 0. mtcars &lt;- mtcars %&gt;% mutate(loghp1 = coalesce(loghp, 0)) #or mtcars &lt;- mtcars %&gt;% mutate(loghp = replace_na(loghp, &quot;missing&quot;)) 2.3.6 Filter individuals with nas in specified variable, or retain complete cases mtcars &lt;- mtcars %&gt;% filter(!is.na(hp)) # no missing values found mtcars &lt;- mtcars %&gt;%filter(complete.cases(.)) # no missing values found 2.3.7 Delete specified columns mtcars1 &lt;- mtcars %&gt;% select(-(drat)) # single column mtcars2 &lt;- mtcars %&gt;% select(-c(drat,hp,vs:gear)) # multiple columns rm(list=setdiff(ls(), &quot;mtcars&quot;)) # clean environment 2.3.8 Find duplicate rows (e.g. duplicated participant datasets) # specify which variable to check for duplication n_occur1 &lt;- data.frame(table(mtcars$mpg)) kable(n_occur1[n_occur1$Freq &gt; 1,]) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() Var1 Freq 1 10.4 2 6 15.2 2 14 19.2 2 16 21 2 17 21.4 2 19 22.8 2 23 30.4 2 2.3.9 Keep Distinct rows only based on a value (for example the prescription code) using dplyr mtcarsdistinct &lt;- mtcars %&gt;% distinct(cyl, .keep_all= TRUE) Reference 2.3.10 Delete rows (individuals) based on value of a variable mtcars1&lt;-mtcars %&gt;% filter(!(cyl==6)) mtcars2&lt;-mtcars %&gt;% filter(!(cyl==6 | hp==180)) # | is the &#39;or&#39; operator mtcars3&lt;-mtcars %&gt;% filter(!(cyl==8 &amp; hp==215)) # &amp; is the &#39;and&#39; operator # remove the ! To select the individuals with the specified conditions 2.3.11 Use if else to calculate based on values # no NA&#39;s so all values unchanged. mtcars &lt;- mtcars %&gt;% mutate(vs=ifelse(is.na(vs),(carb-am)/365.25,vs)) 2.3.12 Merge data frames by adding variables left_join(x, y): returns all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. inner_join(x, y): returns all rows from x where there are matching values in y, and all columns from x and y. If there are multiple matches between x and y, all combinations of the matches are returned. full_join(x, y): returns all rows and all columns from both x and y. Where there are not matching values, the function returns NA for the one missing * inner: only rows with matching keys in both x and y left: all rows in x, adding matching columns from y right: all rows in y, adding matching columns from x full: all rows in x with matching columns in y, then the rows of y that dont match x. #prepare new dataset # make the rownames into a &#39;joinable&#39; column mtcars &lt;- mtcars %&gt;% mutate(carnames=rownames(mtcars)) mtcars_extradata &lt;- mtcars %&gt;% select(cyl) # make the rownames into a &#39;joinable&#39; column mtcars_extradata &lt;- mtcars_extradata %&gt;% mutate(carnames=rownames(mtcars_extradata)) mtcars_extradata &lt;- mtcars_extradata %&gt;% mutate(valves=cyl*4) mtcars_extradata &lt;- mtcars_extradata %&gt;% select(-cyl) kable(glimpse(mtcars_extradata%&gt;% slice(1:6))) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() ## Rows: 6 ## Columns: 2 ## $ carnames &lt;chr&gt; &quot;Mazda RX4&quot;, &quot;Mazda RX4 Wag&quot;, &quot;Datsun 710&quot;, &quot;Hornet 4 Drive&quot;,~ ## $ valves &lt;dbl&gt; 24, 24, 16, 24, 32, 24 carnames valves Mazda RX4 Mazda RX4 24 Mazda RX4 Wag Mazda RX4 Wag 24 Datsun 710 Datsun 710 16 Hornet 4 Drive Hornet 4 Drive 24 Hornet Sportabout Hornet Sportabout 32 Valiant Valiant 24 mtcars &lt;- left_join(mtcars,mtcars_extradata,by = &#39;carnames&#39;) kable(glimpse(mtcars %&gt;% slice(1:6))) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() ## Rows: 6 ## Columns: 17 ## $ mpg &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1 ## $ cyl &lt;dbl&gt; 6, 6, 4, 6, 8, 6 ## $ disp &lt;dbl&gt; 160, 160, 108, 258, 360, 225 ## $ hp &lt;dbl&gt; 110, 110, 93, 110, 175, 105 ## $ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76 ## $ wt &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460 ## $ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22 ## $ vs &lt;dbl&gt; 0, 0, 1, 1, 0, 1 ## $ am &lt;dbl&gt; 1, 1, 1, 0, 0, 0 ## $ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3 ## $ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1 ## $ hp_cat &lt;fct&gt; high hp, high hp, low hp, high hp, high hp, high hp ## $ loghp &lt;chr&gt; &quot;2.04139268515822&quot;, &quot;2.04139268515822&quot;, &quot;missing&quot;, &quot;2.0413926~ ## $ sum &lt;dbl&gt; 273.90, 273.90, 204.85, 371.08, 538.15, 332.76 ## $ loghp1 &lt;dbl&gt; 2.041393, 2.041393, 0.000000, 2.041393, 2.243038, 2.021189 ## $ carnames &lt;chr&gt; &quot;Mazda RX4&quot;, &quot;Mazda RX4 Wag&quot;, &quot;Datsun 710&quot;, &quot;Hornet 4 Drive&quot;,~ ## $ valves &lt;dbl&gt; 24, 24, 16, 24, 32, 24 mpg cyl disp hp drat wt qsec vs am gear carb hp_cat loghp sum loghp1 carnames valves 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 high hp 2.04139268515822 273.90 2.041393 Mazda RX4 24 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 high hp 2.04139268515822 273.90 2.041393 Mazda RX4 Wag 24 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 low hp missing 204.85 0.000000 Datsun 710 16 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 high hp 2.04139268515822 371.08 2.041393 Hornet 4 Drive 24 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 high hp 2.24303804868629 538.15 2.243038 Hornet Sportabout 32 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 high hp 2.02118929906994 332.76 2.021189 Valiant 24 2.3.13 Merge data frames by adding individuals not variables mtcarsmerged &lt;- bind_rows(mtcars2, mtcars3) rm(list=setdiff(ls(), &quot;mtcars&quot;)) # clean environment Reference 2.3.14 Create a new factor from existing factors mtcars &lt;- mtcars %&gt;% mutate(cyc_carb = paste(cyl,carb,sep=&quot;-&quot;)) "],["statistical-methods.html", "2.4 Statistical Methods", " 2.4 Statistical Methods 2.4.1 Linear Regression 2.4.2 Summarise and perform linear regression on multiple groups kable(mtcars %&gt;% group_by(as.factor(gear)) %&gt;% summarise(mean = mean(qsec), sd = sd(qsec))) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() as.factor(gear) mean sd 3 17.692 1.349916 4 18.965 1.613880 5 15.640 1.130487 #What if you wanted to run the same linear regression model by the different #group levels? Instead of running #summary(lm(y~x)) for the number of levels #you have, you can use the R package broom along with dplyr. # Run the same regression model for gears ## kable(mtcars%&gt;% group_by(gear) %&gt;% do(fitgear = glance(lm(hp~qsec, data = .))) %&gt;% unnest(fitgear),digits=2) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() gear r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC deviance df.residual nobs 3 0.66 0.63 28.87 25.19 0.00 1 -70.65 147.31 149.43 10837.12 13 15 4 0.10 0.01 25.72 1.15 0.31 1 -54.90 115.80 117.26 6616.46 10 12 5 0.88 0.83 41.95 21.03 0.02 1 -24.50 55.00 53.83 5279.95 3 5 Reference 2.4.3 Summary Tables Summarise by group kable(mtcars %&gt;% group_by(cyl) %&gt;% summarise(Ave=mean(hp), StDev=sd(hp))) %&gt;% kable_styling(full_width = FALSE) %&gt;% kable_minimal() cyl Ave StDev 4 82.63636 20.93453 6 122.28571 24.26049 8 209.21429 50.97689 Summarise multiple functions across several variables # make sure brackets are correct df.sum &lt;- mtcars %&gt;% select(mpg,cyl,hp) %&gt;% summarise(across(everything(),list(mean=mean,sd=sd))) kable(df.sum,digits=2) %&gt;% kable_styling(full_width = FALSE) %&gt;% kable_minimal() mpg_mean mpg_sd cyl_mean cyl_sd hp_mean hp_sd 20.09 6.03 6.19 1.79 146.69 68.56 df.longer &lt;- df.sum%&gt;% pivot_longer(col=everything(), names_to = c(&quot;Attribute&quot;,&quot;.value&quot;), names_sep = &quot;_&quot;) kable(df.longer,digits=2) %&gt;% kable_styling(full_width = FALSE) %&gt;% kable_minimal() Attribute mean sd mpg 20.09 6.03 cyl 6.19 1.79 hp 146.69 68.56 "],["chapter-2-the-second-chapter.html", "Chapter 2 (the second chapter) ", " Chapter 2 (the second chapter) "],["this-is-the-second-chapter.html", "2.5 this is the second chapter", " 2.5 this is the second chapter x &lt;- 5+9 x ## [1] 14 "]]

[["index.html", "Useful R Syntax 1 Overview ", " Useful R Syntax Chris McNeil 2021-05-04 1 Overview "],["structure-of-collection.html", "1.1 Structure of collection", " 1.1 Structure of collection Rmarkdown formatting basics Rstudio load/unload packages print figures to files Libraries/packages essential/useful packaged data wrangling load dataset (and basic cleaning) clean environment check for duplicates data restructuring Merging datasheets (add variables) Merging datasets (add rows) Reshaping - Converting to longer or shorter format data manipulation (creating new variables) recode factors dealing with missing data Data reduction with PCA Data standardisation statistical analysis  basic statistical analysis - advanced Tables Graphs and Plots "],["Title.html", "2 Collection of useful R syntax and methods ", " 2 Collection of useful R syntax and methods "],["introduction.html", "2.1 Introduction", " 2.1 Introduction This document is a collection of useful code for Rmarkdown and R I have used the mtcars dataset if possible I have used the Tidyverse and the pipe ( %&gt;% ) if possible I recommend that the code is checked for warnings that is is not depreciated Dont Panic "],["rmarkdown.html", "2.2 RMarkdown", " 2.2 RMarkdown 2.2.1 Formatting basics *** on it own, for a horizontal line **text** for **bold** *text* for *italics* 1. Item 1 2. Item 2 3. Item 3 + Item 3a + Item 3b for ordered lists [linked phrase](http://example.com) for links ![alt text](figures/img.png) for images ### R chunk basics message=FALSE, warning=FALSE, include=FALSE, ECHO=FALSE (show output), To set document default knitr::opts_chunk$set(echo=FALSE) "],["rstudio.html", "2.3 Rstudio", " 2.3 Rstudio 2.3.1 Useful packages Load all libraries library(tidyverse) # data handling and viz ## Warning: package &#39;tidyverse&#39; was built under R version 4.0.5 ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.3 v purrr 0.3.4 ## v tibble 3.1.0 v dplyr 1.0.5 ## v tidyr 1.1.3 v stringr 1.4.0 ## v readr 1.4.0 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(janitor) #dataframe import cleaning ## Warning: package &#39;janitor&#39; was built under R version 4.0.5 ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test library(knitr) #nice html tables ## Warning: package &#39;knitr&#39; was built under R version 4.0.5 library(kableExtra) # nicer knitr tables ## Warning: package &#39;kableExtra&#39; was built under R version 4.0.5 ## ## Attaching package: &#39;kableExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## group_rows library(broom) ## Warning: package &#39;broom&#39; was built under R version 4.0.5 library(readr) # load csv stored data library(geosphere) # for calc daylength ## Warning: package &#39;geosphere&#39; was built under R version 4.0.5 2.3.2 Remove a package (library) #Unload a module: library(clipr) #load ## Welcome to clipr. See ?write_clip for advisories on writing to the clipboard in R. detach(package:clipr) #unload "],["loading-and-manipulating-packages-and-data-frames.html", "2.4 Loading and manipulating packages and data frames", " 2.4 Loading and manipulating packages and data frames 2.4.1 Data importing using Janitor # Create a data.frame with dirty names test_df &lt;- as.data.frame(matrix(ncol = 6)) names(test_df) &lt;- c(&quot;firstName&quot;, &quot;ábc@!*&quot;, &quot;% successful (2009)&quot;, &quot;REPEAT VALUE&quot;, &quot;REPEAT VALUE&quot;, &quot;&quot;) head(test_df) ## firstName ábc@!* % successful (2009) REPEAT VALUE REPEAT VALUE ## 1 NA NA NA NA NA NA test_df &lt;- test_df %&gt;% clean_names() head(test_df) ## first_name abc percent_successful_2009 repeat_value repeat_value_2 x ## 1 NA NA NA NA NA NA Reference here 2.4.2 Remove dataframe from environment: data(&quot;mtcars&quot;) data(&quot;band_instruments&quot;) data(&quot;band_instruments2&quot;) # Load example datasets rm(list=ls()[! ls() %in% c(&quot;band_instruments&quot;,&quot;band_instruments2&quot;)]) # Everything except Band instruments rm(list=setdiff(ls(), &quot;band_instruments&quot;)) # Everything except &quot;bandinstruments&quot; rm(list=ls()) # Remove everything Reference: Stackoverflow 2.4.3 Save dataframe as CSV or R data file (with unique date) make date string datenow &lt;- format(Sys.time(), &quot;_%Y_%m_%d&quot;) date ## function () ## .Internal(date()) ## &lt;bytecode: 0x0000000020722e80&gt; ## &lt;environment: namespace:base&gt; data(mtcars) write these data to save file names #create data directory dir.create(&quot;data_out&quot;) ## Warning in dir.create(&quot;data_out&quot;): &#39;data_out&#39; already exists filenamecsv &lt;- paste(&quot;data_out/mtcsvdata&quot;,datenow,&quot;.csv&quot;,sep=&quot;&quot;) filenamerda &lt;- paste(&quot;data_out/mtrdadata&quot;,datenow,&quot;.rda&quot;,sep=&quot;&quot;) Save the files to directory save(mtcars,file=filenamerda) write.csv(mtcars,file=filenamecsv) 2.4.4 write these data to save files filenameallsav &lt;- paste(&quot;data_amos/semdata_all&quot;,datenow,&quot;.sav&quot;,sep=&quot;&quot;) filenamemalesav &lt;- paste(&quot;data_amos/semdata_male&quot;,datenow,&quot;.sav&quot;,sep=&quot;&quot;) filenamefemalesav &lt;- paste(&quot;data_amos/semdata_female&quot;,datenow,&quot;.sav&quot;,sep=&quot;&quot;) filenameallsav ## [1] &quot;data_amos/semdata_all_2021_05_04.sav&quot; 2.4.5 Recode a text variable Tidyverse libraries are needed for the following examples. data(&quot;band_members&quot;) kable(head(band_members)) %&gt;% kable_minimal(full_width = F) name band Mick Stones John Beatles Paul Beatles band_members &lt;- band_members %&gt;% mutate(name=recode(name, &quot;Mick&quot;= &quot;m&quot;)) kable(head((band_members))) %&gt;% kable_minimal(full_width = F) name band m Stones John Beatles Paul Beatles rm(list=ls()) # Remove everything Reference for table formatting Kable Extra 2.4.6 Altering variable names: Remove all underscores from names data(&quot;mtcars&quot;) mtcars &lt;- mtcars %&gt;% rename(hp_new=hp) kable(head((mtcars))) %&gt;% kable_minimal(full_width = F) mpg cyl disp hp_new drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 mtcars &lt;- mtcars %&gt;% rename_with(.fn = ~str_replace(., &quot;_&quot;, &quot;&quot;)) kable(head((mtcars))) %&gt;% kable_minimal(full_width = F) mpg cyl disp hpnew drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 "],["data-manipulation.html", "2.5 Data manipulation", " 2.5 Data manipulation 2.5.1 Bin variable ( e.g. Low/Medium/High) data(mtcars) mtcars &lt;- mtcars %&gt;% mutate(hp_cat=cut(hp, breaks=c(-Inf, 100, Inf), labels=c(&quot;low hp&quot;,&quot;high hp&quot;))) 2.5.2 Perform conditional function mtcars &lt;- mtcars %&gt;% mutate(loghp=ifelse(cyl&gt;4,log10(hp),NA)) # Nonsensical example, but log transformed all horse powers of cars with more # than four cylinders 2.5.3 Calculate sum of values across rows mtcars &lt;- mtcars %&gt;% mutate(sum = select(., disp:drat) %&gt;% apply(1, sum, na.rm=TRUE)) #apply() takes Data frame or matrix as an input and gives output in vector #(i.e.many columns to one list) # the &#39;1&#39; sets the dataframe to use (already selected here) Reference for summation across rows 2.5.4 Standardise variable (mean of 0, SD of 1) dat2 &lt;- mtcars %&gt;% as_tibble() %&gt;% mutate(across(where(is.numeric), scale)) funcs &lt;- list(mean = ~mean(.x,na.rm = TRUE), sd = ~sd(.x,na.rm = TRUE) ) dat2 %&gt;% summarise(across(where(is.numeric),funcs)) ## # A tibble: 1 x 26 ## mpg_mean mpg_sd cyl_mean cyl_sd disp_mean disp_sd hp_mean hp_sd drat_mean ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7.11e-17 1 -1.47e-17 1 -9.08e-17 1 1.04e-17 1 -2.92e-16 ## # ... with 17 more variables: drat_sd &lt;dbl&gt;, wt_mean &lt;dbl&gt;, wt_sd &lt;dbl&gt;, ## # qsec_mean &lt;dbl&gt;, qsec_sd &lt;dbl&gt;, vs_mean &lt;dbl&gt;, vs_sd &lt;dbl&gt;, am_mean &lt;dbl&gt;, ## # am_sd &lt;dbl&gt;, gear_mean &lt;dbl&gt;, gear_sd &lt;dbl&gt;, carb_mean &lt;dbl&gt;, ## # carb_sd &lt;dbl&gt;, loghp_mean &lt;dbl&gt;, loghp_sd &lt;dbl&gt;, sum_mean &lt;dbl&gt;, ## # sum_sd &lt;dbl&gt; 2.5.5 Conditional Replacements Replace all NAs in a specified variable with 0. mtcars &lt;- mtcars %&gt;% mutate(loghp1 = coalesce(loghp, 0)) #or mtcars &lt;- mtcars %&gt;% mutate(loghp = replace_na(loghp, &quot;missing&quot;)) 2.5.6 Filter individuals with nas in specified variable, or retain complete cases mtcars &lt;- mtcars %&gt;% filter(!is.na(hp)) # no missing values found mtcars &lt;- mtcars %&gt;%filter(complete.cases(.)) # no missing values found 2.5.7 Delete specified columns mtcars1 &lt;- mtcars %&gt;% select(-(drat)) # single column mtcars2 &lt;- mtcars %&gt;% select(-c(drat,hp,vs:gear)) # multiple columns rm(list=setdiff(ls(), &quot;mtcars&quot;)) # clean environment 2.5.8 Find duplicate rows (e.g. duplicated participant datasets) # specify which variable to check for duplication n_occur1 &lt;- data.frame(table(mtcars$mpg)) kable(n_occur1[n_occur1$Freq &gt; 1,]) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() Var1 Freq 1 10.4 2 6 15.2 2 14 19.2 2 16 21 2 17 21.4 2 19 22.8 2 23 30.4 2 2.5.9 Impute missing valued 2.5.9.1 To be completed 2.5.10 Keep Distinct rows only based on a value (for example the prescription code) using dplyr mtcarsdistinct &lt;- mtcars %&gt;% distinct(cyl, .keep_all= TRUE) Reference 2.5.11 Delete rows (individuals) based on value of a variable mtcars1&lt;-mtcars %&gt;% filter(!(cyl==6)) mtcars2&lt;-mtcars %&gt;% filter(!(cyl==6 | hp==180)) # | is the &#39;or&#39; operator mtcars3&lt;-mtcars %&gt;% filter(!(cyl==8 &amp; hp==215)) # &amp; is the &#39;and&#39; operator # remove the ! To select the individuals with the specified conditions 2.5.12 Use if else to calculate based on values # no NA&#39;s so all values unchanged. mtcars &lt;- mtcars %&gt;% mutate(vs=ifelse(is.na(vs),(carb-am)/365.25,vs)) 2.5.13 Merge data frames by adding variables *left_join(x, y): returns all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. *inner_join(x, y): returns all rows from x where there are matching values in y, and all columns from x and y. If there are multiple matches between x and y, all combinations of the matches are returned. *full_join(x, y): returns all rows and all columns from both x and y. Where there are not matching values, the function returns NA for the one missing inner: only rows with matching keys in both x and y left: all rows in x, adding matching columns from y right: all rows in y, adding matching columns from x full: all rows in x with matching columns in y, then the rows of y that dont match x. # prepare new dataset # make the rownames into a &#39;joinable&#39; column mtcars &lt;- mtcars %&gt;% mutate(carnames=rownames(mtcars)) mtcars_extradata &lt;- mtcars %&gt;% select(cyl) # make the rownames into a &#39;joinable&#39; column mtcars_extradata &lt;- mtcars_extradata %&gt;% mutate(carnames=rownames(mtcars_extradata)) mtcars_extradata &lt;- mtcars_extradata %&gt;% mutate(valves=cyl*4) mtcars_extradata &lt;- mtcars_extradata %&gt;% select(-cyl) kable(glimpse(mtcars_extradata%&gt;% slice(1:6))) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() ## Rows: 6 ## Columns: 2 ## $ carnames &lt;chr&gt; &quot;Mazda RX4&quot;, &quot;Mazda RX4 Wag&quot;, &quot;Datsun 710&quot;, &quot;Hornet 4 Drive&quot;,~ ## $ valves &lt;dbl&gt; 24, 24, 16, 24, 32, 24 carnames valves Mazda RX4 Mazda RX4 24 Mazda RX4 Wag Mazda RX4 Wag 24 Datsun 710 Datsun 710 16 Hornet 4 Drive Hornet 4 Drive 24 Hornet Sportabout Hornet Sportabout 32 Valiant Valiant 24 mtcars &lt;- left_join(mtcars,mtcars_extradata,by = &#39;carnames&#39;) kable(glimpse(mtcars %&gt;%select(carb:valves) %&gt;% slice(1:6))) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() ## Rows: 6 ## Columns: 7 ## $ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1 ## $ hp_cat &lt;fct&gt; high hp, high hp, low hp, high hp, high hp, high hp ## $ loghp &lt;chr&gt; &quot;2.04139268515822&quot;, &quot;2.04139268515822&quot;, &quot;missing&quot;, &quot;2.0413926~ ## $ sum &lt;dbl&gt; 273.90, 273.90, 204.85, 371.08, 538.15, 332.76 ## $ loghp1 &lt;dbl&gt; 2.041393, 2.041393, 0.000000, 2.041393, 2.243038, 2.021189 ## $ carnames &lt;chr&gt; &quot;Mazda RX4&quot;, &quot;Mazda RX4 Wag&quot;, &quot;Datsun 710&quot;, &quot;Hornet 4 Drive&quot;,~ ## $ valves &lt;dbl&gt; 24, 24, 16, 24, 32, 24 carb hp_cat loghp sum loghp1 carnames valves 4 high hp 2.04139268515822 273.90 2.041393 Mazda RX4 24 4 high hp 2.04139268515822 273.90 2.041393 Mazda RX4 Wag 24 1 low hp missing 204.85 0.000000 Datsun 710 16 1 high hp 2.04139268515822 371.08 2.041393 Hornet 4 Drive 24 2 high hp 2.24303804868629 538.15 2.243038 Hornet Sportabout 32 1 high hp 2.02118929906994 332.76 2.021189 Valiant 24 2.5.14 Merge data frames by adding individuals not variables mtcarsmerged &lt;- bind_rows(mtcars2, mtcars3) rm(list=setdiff(ls(), &quot;mtcars&quot;)) # clean environment Reference 2.5.15 Create a new factor from existing factors mtcars &lt;- mtcars %&gt;% mutate(cyc_carb = paste(cyl,carb,sep=&quot;-&quot;)) 2.5.16 change data types (merging fails if data types are different) # adni_demog&lt;-adni_demog %&gt;% mutate(age_scan=as.numeric(age_scan)) # ukbb&lt;-ukbb %&gt;% mutate(scan_no=as.numeric(scan_no)) 2.5.17 calculate dates and photoperiod (using geosphere library) #import sample dataset dateslat &lt;- read_csv(&quot;dateslat.csv&quot;) ## ## -- Column specification -------------------------------------------------------- ## cols( ## `ID&#39;s` = col_double(), ## `date (dmy)` = col_character(), ## latitude = col_double() ## ) dateslat &lt;- dateslat %&gt;% clean_names() dateslat &lt;- dateslat %&gt;% mutate(dateofscan=(as.Date(date_dmy,format=&quot;%d/%m/%Y&quot;))) dateslat &lt;- dateslat %&gt;% mutate(daylength=daylength(latitude,dateofscan)) dateslat %&gt;% ggplot(aes(x=dateofscan,y=daylength)) +geom_line() +theme_minimal() 2.5.18 Reduce variables using PCA 2.5.18.1 To be completed "],["statistical-analysis.html", "2.6 Statistical Analysis", " 2.6 Statistical Analysis 2.6.1 Linear Regression 2.6.1.1 Summarise and perform linear regression on multiple groups kable(mtcars %&gt;% group_by(as.factor(gear)) %&gt;% summarise(mean = mean(qsec), sd = sd(qsec))) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() as.factor(gear) mean sd 3 17.692 1.349916 4 18.965 1.613880 5 15.640 1.130487 #Run the same linear regression model by group levels? #Instead of running #summary(lm(y~x)) for the number of levels #you have, you can use the R package broom along with dplyr. # Run the same regression model for gears ## kable(mtcars%&gt;% group_by(gear) %&gt;% do(fitgear = glance(lm(hp~qsec, data = .))) %&gt;% unnest(fitgear),digits=2) %&gt;% kable_styling(full_width = F) %&gt;% kable_minimal() gear r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC deviance df.residual nobs 3 0.66 0.63 28.87 25.19 0.00 1 -70.65 147.31 149.43 10837.12 13 15 4 0.10 0.01 25.72 1.15 0.31 1 -54.90 115.80 117.26 6616.46 10 12 5 0.88 0.83 41.95 21.03 0.02 1 -24.50 55.00 53.83 5279.95 3 5 Reference 2.6.2 Logistic Regression 2.6.2.1 to be completed 2.6.3 Survival Analysis and Visualisation 2.6.3.1 To be completed 2.6.4 Receiver Operated Curves (ROC) 2.6.4.1 To be completed "],["data-visualisation.html", "2.7 Data Visualisation", " 2.7 Data Visualisation 2.7.1 Summary Tables 2.7.1.1 Summarise by group kable(mtcars %&gt;% group_by(cyl) %&gt;% summarise(Ave=mean(hp), StDev=sd(hp))) %&gt;% kable_styling(full_width = FALSE) %&gt;% kable_minimal() cyl Ave StDev 4 82.63636 20.93453 6 122.28571 24.26049 8 209.21429 50.97689 2.7.1.2 Summarise multiple functions across several variables # make sure brackets are correct df.sum &lt;- mtcars %&gt;% select(mpg,cyl,hp) %&gt;% summarise(across(everything(),list(mean=mean,sd=sd))) kable(df.sum,digits=2) %&gt;% kable_styling(full_width = FALSE) %&gt;% kable_minimal() mpg_mean mpg_sd cyl_mean cyl_sd hp_mean hp_sd 20.09 6.03 6.19 1.79 146.69 68.56 df.longer &lt;- df.sum%&gt;% pivot_longer(col=everything(), names_to = c(&quot;Attribute&quot;,&quot;.value&quot;), names_sep = &quot;_&quot;) kable(df.longer,digits=2) %&gt;% kable_styling(full_width = FALSE) %&gt;% kable_minimal() Attribute mean sd mpg 20.09 6.03 cyl 6.19 1.79 hp 146.69 68.56 "],["chapter-2-the-second-chapter.html", "Chapter 2 (the second chapter) ", " Chapter 2 (the second chapter) "],["ipso-lorum.html", "2.8 Ipso Lorum", " 2.8 Ipso Lorum x &lt;- 5+9 x ## [1] 14 "]]
